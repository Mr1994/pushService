<?php
/**
 * 访问频率限制，这个类是这对api相关功能的。
 *
 * 注意：下面这样配置的意义是说，有120次请求的机会。这120次请求可以理解成是不做速率限制的。然后从第一次请求开始，每5s会加一次请求机会。这个就是令牌桶算法了。
 * $rateLimit  = 120;
 * $timePeriod = 600;
 *
    配置示例：
    $behaviors['rateLimiter'] = [ //基础限速配置,可以在 BaseController里配置，意思就是基于站点的基础限速配置。。黑名单的最大范围是当前项目。最小范围是当前action
            'baseRuleIp'  =>[
                'rateLimit'  => 60,
                'timePeriod' => 120,
            ],
    ]
    $behaviors['rateLimiter'] = ArrayHelper::merge($behaviors['rateLimiter'], [
            'block' => [ // 哪些action超过任何一个限速配置后，需要的黑名单配置
                [
                    'action'        => ['index','reg'],  //支持多个action，多种配置
                    'block_time'    => 600,  //黑名单多长时间
                    'block_hit_num' => 20,  //触发限速多少次后进入黑名单
                ],
                [
                    'action'        => ['login','logout'],
                    'block_time'    => 86400,
                    'block_hit_num' => 5,
                ],
            ],
            'rule'  => [
                'RuleIp'      => [ // 修改基础Ip级别的limit，需要加action参数。意思是针对当前action的特殊配置
                    'action'     => ['index'],
                    'rateLimit'  => 3,
                    'timePeriod' => 60,
                ],
                'test12313' => [ //自定义的限速，需要注意的是type是必须传的，并且需要在User类里配置好
                    'type'       => User::TEST123123,
                    'identity'   => function() {
                        return substr(\Yii::$app->request->userIP, 7);
                    },
                    'rateLimit'  => 10,
                    'timePeriod' => 60,
                ],
                'dailyRuleIp' => [
                    'action'     => ['index'],
                    'type'       => User::DAILY,
                    'identity'   => \Yii::$app->request->userIP,
                    'rateLimit'  => 10,
                    'timePeriod' => 86400,
                ],
            ],
        ]);
 * @Author yuanjinliang, <yuanjinliang@julive.com>.
 * Date: 2019-06-11 19:08
 */

namespace app\components\filters\ratelimiter;

use Yii;
use yii\web\TooManyRequestsHttpException;

class InternalAPIRateLimiter extends BaseRateLimiter
{
    public $client_ip;
    public $rateLimit  = 300;
    public $timePeriod = 100;
    public $baseRule  = []; //自定义的基础规则，可以覆盖本类里配置的参数
    public $base_rule = [
        'RuleIp',
    ];

    public function getRuleIp()
    {
        return [
            'identity'   => 'internal_api_'.$this->client_ip,
            'rateLimit'  => $this->rateLimit,
            'timePeriod' => $this->timePeriod,
        ];
    }



    public function init()
    {
        if (!isset($this->client_ip)) {
            $this->base_rule = [];
        }
        parent::init(); // TODO: Change the autogenerated stub
        $rule = [];
        foreach ($this->base_rule as $item) {
            $rule[$item] = $this->$item;
            if (isset($this->baseRule[$item])) {
                $rule[$item] = array_merge($rule[$item], $this->baseRule[$item]);
            }
        }
        if (isset($this->rule)) {
            foreach ($this->rule as $name => $item) {
                if (isset($item['action']) && !in_array($this->action_id, $item['action'])) {
                    continue;
                }

                if (isset($rule[$name]) && $rule[$name]) {
                    $rule[$name] = array_merge($rule[$name], $item);
                } else {
                    $rule[$name] = $item;
                }
            }
        }

//        print_r($rule);die;
        $this->rule = $rule;
    }


    public function clearAllowance($request, $response, $action)
    {
    }

    public function error_handler($request, $response, $action)
    {
        throw new TooManyRequestsHttpException($this->errorMessage);
    }
}