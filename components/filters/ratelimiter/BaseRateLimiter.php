<?php
/**
 *
 * @Author yuanjinliang, <yuanjinliang@julive.com>.
 * Date: 2019-06-11 15:41
 */

namespace app\components\filters\ratelimiter;

use Yii;
use yii\filters\RateLimiter;
use yii\filters\RateLimitInterface;
use yii\web\BadRequestHttpException;
use yii\web\TooManyRequestsHttpException;

abstract class BaseRateLimiter extends RateLimiter
{
    public $limit_count = 3;// 最多可配置3层limit ,3次redis读取
    public $action_id;

    //速率限制，如 600s 内 120 次, 即：每次请求要间隔5s
    public $rateLimit  = 120;
    public $timePeriod = 600;

    public $rule;
    public $type = 'ratelimit';

    public $unique_action = '';
    /**
     * 白名单action
     * @var
     */
    public $allow_actions = [];
    /**
     * 黑名单相关配置
     * 针对IP做限制
     * 全局的配置，任何一个规则触发了黑名单，就会加到黑名单里了。
     * @var int
     */
    public $block_all     = 0; //是否是全局黑名单，默认否。是的话会阻止IP访问整个"项目"
    public $block_hit_num = 0; //多少次后加黑名单
    public $block_time    = 0; //黑名单多少时间

    /**
     * 独立设置的黑名单配置
     * @var array
     */
    public $block;
    public $whriteKey = "ngx_lua_config:ipWhiteTable";
    public $whritelist = []; //白名单列表
    public $whriteKey_expire = 600;
    /**
     * 搜索引擎蜘蛛IP白名单
     * @var [type]
     */
//     public $alloc_ip = <<<EOT
// #百度
// 61.135.165.0/24
// 61.135.169.0/24
// 61.135.190.0/24
// 111.206.36.0/24
// 112.80.254.0/24
// 115.239.212.0/24
// 123.125.67.0/24
// 220.181.51.0/24
// 220.181.165.0/24
// #google
// 66.249.65.25
// 66.249.75.0/24
// #sogou
// 106.120.173.90
// #other
// 207.46.13.0/24
// 157.55.39.0/24
// 40.77.167.0/24
// #360
// 101.226.166.0/24
// 101.226.167.0/24
// 101.226.168.0/24
// 101.226.169.0/24
// 182.118.20.0/24
// 182.118.21.0/24
// 182.118.22.0/24
// 182.118.25.0/24
// 182.118.35.0/24
// 61.55.185.0/24
// 42.236.99.0/24
// 180.153.236.0/24
// 182.118.28.0/24
// 10.145.81.195
// 10.145.84.67
// #feed
// 140.205.92.2
// 140.205.92.3
// 140.205.92.1
// 140.205.92.4
// EOT;
//     /**
//      * 搜索引擎蜘蛛IP白名单
//      * 10.145.84.67  -- 百度落地页生成订单的请求服务器IP
//      * 10.145.81.195  -- 百度落地页生成订单的请求服务器IP
//      * @var [type]
//      */
//     public $comjia_ips = <<<EOT
// #comjia
// 203.100.84.11
// 1.202.220.122/24
// 58.132.171.11
// 124.127.208.23
// 36.110.71.27
// 36.110.71.28
// 36.110.71.29
// 111.203.227.58
// 10.145.84.67
// 10.145.81.195
// 223.71.220.128/27
// 36.110.71.0/26
// 111.198.148.74
// 211.144.0.94
// 43.227.254.30
// 58.135.84.55
// 58.135.84.48
// 115.182.121.81
// 211.144.1.194
// 1.203.112.150
// 36.110.199.0/24
// 43.228.36.194
// EOT;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->action_id = \Yii::$app->requestedAction->id;
        if (isset($this->block)) {
            foreach ($this->block as $item) {
                if (in_array($this->action_id, $item['action'])) {
                    $this->block_hit_num = $item['block_hit_num'];
                    $this->block_time = $item['block_time'];
                    break;
                }
            }
        }
        $this->getIpTableCache();
    }

    /**
     * 获取缓存
     */
    private function getIpTableCache(){
        if (!\Yii::$app->iptable_cache->exists($this->whriteKey)) {
            $iptableTmp = \Yii::$app->ip_table_redis->get($this->whriteKey) ?? '';
            $iptableTmp && \Yii::$app->iptable_cache->add($this->whriteKey,$iptableTmp,$this->whriteKey_expire);
            $iptableTmp && $this->whritelist = json_decode($iptableTmp,true) ?? [];
        } else {
            $this->whritelist = json_decode(\Yii::$app->iptable_cache->get($this->whriteKey),true) ?? [];
        }
    }
    /**
     * @inheritdoc
     */
    public function beforeAction($action)
    {
        $this->unique_action = $action->getUniqueId() ?? '';
        //是否 head 请求
        if (Yii::$app->request->isHead) {
            return true;
        }
        if (in_array($action->id, $this->allow_actions)) {
            return true;
        }

        //检测IP是否在白名单(nginx统一白名单)
        foreach ($this->whritelist as $wk => $wv) {
            if ($this->netMatch($wv, \Yii::$app->request->userIP)) {
                return true;
            }
        }

        $cache_key = 'limiter_white_ip';
        //检测IP是否在白名单
        if (Yii::$app->redis->SISMEMBER($cache_key, Yii::$app->request->userIP)) {
            return true;
        }

        if ($this->is_spider()) {
            Yii::info('waring spider IP:' . Yii::$app->request->userIP . '; UA:' . Yii::$app->request->userAgent, 'for_ratelimit');
        } 
        // //检测是否是蜘蛛（蜘蛛的 ip，应该放入白名单，此段逻辑可以不要）
        // if ($this->is_spider()) {
        //     //检测是否在白名单
        //     $white_ip_list = explode("\n", $this->alloc_ip);
        //     foreach ($white_ip_list as $wk => $wv) {
        //         if (strpos($wv, '#') !== false) {
        //             continue;
        //         }
        //         if ($this->netMatch($wv, Yii::$app->request->userIP)) {
        //             return true;
        //         }
        //     }
        //     Yii::info('waring spider IP:' . Yii::$app->request->userIP . '; UA:' . Yii::$app->request->userAgent, 'for_ratelimit');
        // }
        // //检查是否是侃家的公司IP
        // $comjia_ip_list = explode("\n", $this->comjia_ips);
        // foreach ($comjia_ip_list as $wk => $wv) {
        //     if (strpos($wv, '#') !== false) {
        //         continue;
        //     }
        //     if ($this->netMatch($wv, Yii::$app->request->userIP)) {
        //         return true;
        //     }
        // }

        /**
         * 先进行黑名单确认
         */
        if ($this->block_time > 0) {
            $this->checkBlackList();
        }

        //速率限制
        if (empty($this->rule)) {
            return true;
        }

        foreach ($this->rule as $v) {
            if (empty($v['identity'])) {
                Yii::warning("Rate Limiter ：identity必填".json_encode($v));
                continue;
            }
            if ($this->limit_count-- <= 0) {
                break;
            }
            if (isset($v['action'])) {
                if (!in_array($this->action_id, $v['action'])) {
                    continue;
                }
            }
            $rateLimit = $v['rateLimit'] ?? $this->rateLimit;
            $timePeriod = $v['timePeriod'] ?? $this->timePeriod;
            $type = $v['type'] ?? $this->type;

            $error_handler = $v['error_handler'] ?? [$this, 'error_handler'];
            //用户唯一标识

            $uniqueCode = is_callable($v['identity']) ? call_user_func($v['identity']) : $v['identity'];
            if (empty($uniqueCode)) continue;

            $this->rateLimit($uniqueCode, $rateLimit, $timePeriod, $action, $type, $error_handler);
        }

        return true;
    }

    /**
     * 自定义限速后的报错
     * @param $request
     * @param $response
     * @param $action
     * @return mixed
     */
    abstract function error_handler($request, $response, $action);

    /**
     * 自定义输入完验证码后的解除限速逻辑
     * @param $request
     * @param $response
     * @param $action
     * @return mixed
     */
    abstract function clearAllowance($request, $response, $action);

    /**
     * 频率限制
     *
     * @param string $uniqueCode 用户唯一标识
     * @param $rateLimit
     * @param $timePeriod
     * @param $action
     * @param $type
     * @param null $error_handler
     * @throws TooManyRequestsHttpException
     */
    public function rateLimit($uniqueCode, $rateLimit, $timePeriod, $action, $type, $error_handler = null)
    {
        $user = User::findByIp($uniqueCode, $rateLimit, $timePeriod)->setType($type);

        if ($user instanceof RateLimitInterface) {
            Yii::trace('Check rate limit', __METHOD__);
            $this->customCheckRateLimit(
                $user,
                $this->request ?: Yii::$app->getRequest(),
                $this->response ?: Yii::$app->getResponse(),
                $action,
                $error_handler
            );
        } elseif ($user) {
            Yii::info('Rate limit skipped: "user" does not implement RateLimitInterface.', __METHOD__);
        } else {
            Yii::info('Rate limit skipped: user not logged in.', __METHOD__);
        }
    }

    public function setBlackList()
    {
        $type = Yii::$app->id;
        if (!$this->block_all) {
            $type .= ":" . str_replace(['_', '/'], ':', $this->unique_action);
        }
        (new BlackIp([
            'ip'      => Yii::$app->request->userIP,
            'hit_num' => $this->block_hit_num,
            'expire'  => $this->block_time,
        ]))->setType($type)->update();
    }

    /**
     * 检验是否在黑名单里，如果是就抛出异常
     * @throws BadRequestHttpException
     */
    public function checkBlackList()
    {
        $type = Yii::$app->id;
        if (!$this->block_all) {
            $type .= ":" . str_replace(['_', '/'], ':', $this->unique_action);
        }
        if ((new BlackIp(['ip' => Yii::$app->request->userIP]))->setType($type)->check()) {
            \Yii::error($type . "触发黑名单" . Yii::$app->request->userIP);
            throw new BadRequestHttpException();
        }
    }

    /**
     * Checks whether the rate limit exceeds.
     * @param RateLimitInterface $user the current user
     * @param Request $request
     * @param Response $response
     * @param \yii\base\Action $action the action to be executed
     * @param $error_handler
     * @throws TooManyRequestsHttpException if rate limit exceeds
     */
    public function customCheckRateLimit($user, $request, $response, $action, $error_handler)
    {
        $current = time();

        list ($limit, $window) = $user->getRateLimit($request, $action);
        list ($allowance, $timestamp) = $user->loadAllowance($request, $action);

        $allowance += (int) (($current - $timestamp) * $limit / $window); //上一次到现在的新增机会量，初始化的时候很大，不过下面重置成$limit了
        if ($allowance > $limit) {
            $allowance = $limit;
        }
        if ($allowance < 1) {
            $user->saveAllowance($request, $action, 0, $current);
            $this->addRateLimitHeaders($response, $limit, 0, $window);
            if ($this->block_time > 0) {
                $this->setBlackList();
            }

            if (is_callable($error_handler)) {
                call_user_func_array($error_handler, [$request, $response, $action]);
            } else {
                throw new TooManyRequestsHttpException($this->errorMessage);
            }
//            $this->antiSpider($request, $response, $action);
        } else {
            $user->saveAllowance($request, $action, $allowance - 1, $current);
            $this->addRateLimitHeaders($response, $limit, $allowance - 1, (int) (($limit - $allowance) * $window / $limit));
        }
    }


    /**
     * PHP 中检查或过滤 IP 地址
     *
     * 支持 IP 区间、CIDR（Classless Inter-Domain Routing）及单个 IP 格式
     * 整理：http://www.CodeBit.cn
     * 参考：
     * - {@link http://us2.php.net/manual/zh/function.ip2long.php#70055}
     * - {@link http://us2.php.net/manual/zh/function.ip2long.php#82397}
     *
     * @param string $network 网段，支持 IP 区间、CIDR及单个 IP 格式
     * @param string $ip 要检查的 IP 地址
     * @return boolean
     */
    function netMatch($network, $ip)
    {
        $network = trim($network);
        $ip = trim($ip);
        $result = false;
        // IP range : 174.129.0.0 - 174.129.255.255
        if (false !== ($pos = strpos($network, "-"))) {
            $from = ip2long(trim(substr($network, 0, $pos)));
            $to = ip2long(trim(substr($network, $pos + 1)));
            $ip = ip2long($ip);
            $result = ($ip >= $from and $ip <= $to);
            // CIDR : 174.129.0.0/16
        } else if (false !== strpos($network, "/")) {
            list ($net, $mask) = explode('/', $network);
            $result = (ip2long($ip) & ~((1 << (32 - $mask)) - 1)) == ip2long($net);
            // single IP
        } else {
            $result = $network === $ip;
        }

        return $result;
    }

    /**
     * 判断是否为蜘蛛
     * @return string
     */
    public function is_spider()
    {
        $robot = 0;
        $USER_AGENT = strtolower(Yii::$app->request->userAgent);
        if (strpos($USER_AGENT, "bot")) $robot = 1;
        if (strpos($USER_AGENT, "spider")) $robot = 1;
        if (strpos($USER_AGENT, "slurp")) $robot = 1;
        if (strpos($USER_AGENT, "mediapartners-google")) $robot = 1;
        if (strpos($USER_AGENT, "fast-webcrawler")) $robot = 1;
        if (strpos($USER_AGENT, "altavista")) $robot = 1;
        if (strpos($USER_AGENT, "ia_archiver")) $robot = 1;
        if ($robot == 1) {
            return true;
        } else {
            return false;
        }
    }
}
